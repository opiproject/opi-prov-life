name: Docker

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  push:
    branches: [ main ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
    paths:
      - 'examples/telegraf/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'examples/telegraf/**'

  workflow_dispatch:

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}


jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@f75d088332b07a08afadf6ac53c74509b9453f12
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@57396166ad8aefe6098280995947635806a0e6ea
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        uses: docker/build-push-action@175d02bffea74695e96b351069ac938b338802f9
        with:
          context: examples/telegraf
          file: examples/telegraf/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Build & Start containers
        run: docker-compose -f "docker-compose.yml" up --detach --build
        working-directory: examples/telegraf

      - name: Run tests
        run: |
          echo wait 5s for SPDK to start... && sleep 5s
          docker-compose logs
          docker-compose ps
          docker inspect --format='{{json .Name}} - {{json .State.Health.Status}}' $(docker-compose ps -q)
          uniq -c <<< $(docker inspect --format='{{json .State.Health.Status}}' $(docker-compose ps -q)) | grep -q '4 "healthy"' || true
          docker-compose exec -T spdk /usr/local/bin/perf -r 'traddr:127.0.0.1 trtype:TCP adrfam:IPv4 trsvcid:4420' -c 0x1 -q 1 -o 4096 -w randread -t 10 || true
        working-directory: examples/telegraf

      - name: Logs
        if: failure()
        run: |
          docker-compose ps || true
          docker-compose logs || true
        working-directory: examples/telegraf

      - name: Stop containers
        if: always()
        run: docker-compose -f "docker-compose.yml" down
        working-directory: examples/telegraf
